// tln: tln.logger[.con() | .trace() | etc]
module.exports = {
  tags: (tln) => [/*'tag'*/],
  options: (tln, options) => {/*
    options
      .add( 'origin',         // option name
            'TLN_GIT_ORIGIN', // variable that will be populated
            'Origin url',     // description, default value
            null              // default value
      );
  */},
  dotenvs: (tln) => ['.env'],
  depends: (tln) => ['openjdk-11.0.2'],
  inherits: (tln) => ['sdlc', 'docker', 'sonarqube'],
  variables: (tln, variables) => {/*
    variables
      .set('TLN_GIT_USER', (tln, data) => 'user.name')
      .append('PATH', (tln, data) => `${data.env['COMPONENT_ORIGIN']}${data.sep}lib`)
      .prepend('PATH', (tln, data) => `${data.env['COMPONENT_ORIGIN']}${data.sep}bin`);
  */},
  steps: (tln) => [
    {
      id: 'generate-jersey-grizzly2',
      desc: '',
      script: (tln, script) => script.set([
        'mvn archetype:generate \\',
        '    -DarchetypeArtifactId=jersey-quickstart-grizzly2 \\',
        '    -DarchetypeGroupId=org.glassfish.jersey.archetypes \\',
        '    -DinteractiveMode=false \\',
        '    -DgroupId=${COMPONENT_GROUP_ID} \\',
        '    -DartifactId=${COMPONENT_ARTIFACT_ID} \\',
        '    -Dpackage=${COMPONENT_ID} \\',
        '    -Dversion=${COMPONENT_VERSION} \\',
        '    -DarchetypeVersion=2.28',
        'mv ${COMPONENT_ARTIFACT_ID}/* ./',
        'rmdir ${COMPONENT_ARTIFACT_ID}'
      ])
    },
    {
      id: 'build',
      desc: '',
      script: (tln, script) => script.set([
        'mvn clean install'
      ])
    },
    {
      id: 'serve',
      desc: '',
      script: (tln, script) => script.set([
        'java -jar ./target/${COMPONENT_ID}-${COMPONENT_VERSION}-jar-with-dependencies.jar'
      ])
    },
    {
      id: 'serve-mvn',
      desc: '',
      script: (tln, script) => script.set([
        'mvn exec:java'
      ])
    },
    {
      id: 'docker-build',
      desc: '',
      script: (tln, script) => script.set([
        'docker build --tag ${COMPONENT_ID}:${COMPONENT_VERSION} .'
      ])
    },
    {
      id: 'docker-run',
      desc: '',
      script: (tln, script) => script.set([
        'docker run --rm -d -p ${COMPONENT_PARAM_PORT}:${COMPONENT_PARAM_PORT} -p ${COMPONENT_PARAM_PORTS}:${COMPONENT_PARAM_PORTS} --name ${COMPONENT_ID} ${COMPONENT_ID}:${COMPONENT_VERSION}'
      ])
    }
  ],
  components: (tln) => [/*
    { id: 'sub-component', tags: (tln) => [], ... }
  */]
}